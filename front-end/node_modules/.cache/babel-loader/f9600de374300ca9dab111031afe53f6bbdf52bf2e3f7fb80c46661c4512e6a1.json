{"ast":null,"code":"var _jsxFileName = \"/Users/kobe/Desktop/chatapp-client/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport socket from \"./server\"; // socket 들고오기.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [user, setUser] = useState(null); // 이 코드??\n\n  useEffect(() => {\n    askUserName();\n  }, []);\n  const askUserName = () => {\n    const userName = prompt(\"당신의 이름을 입력하세요\");\n    console.log(\"uuu\", userName);\n    socket.emit(\"login\", userName, res => {\n      console.log(\"Res\", res);\n      // 지금 앱에서의 로그인은 받은 유저의 정보를 저장하고 소켓 아이디도 저장하는것\n      if (res !== null && res !== void 0 && res.ok) {\n        setUser(res.data);\n      }\n    }); // 소켓을 사용하여 입력 받은 사용자의 이름을 보낸다., 콜백 함수를 사용하여 response 값을 받아 처리 가능\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","socket","jsxDEV","_jsxDEV","App","_s","user","setUser","askUserName","userName","prompt","console","log","emit","res","ok","data","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kobe/Desktop/chatapp-client/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport socket from \"./server\"; // socket 들고오기.\n\nfunction App() {\n\n\tconst [user, setUser] = useState(null); // 이 코드??\n\n\tuseEffect(() => {\n\t\taskUserName();\n\t}, []);\n\n  const askUserName=()=>{\n\t\tconst userName = prompt(\"당신의 이름을 입력하세요\");\n\t\tconsole.log(\"uuu\", userName);\n\n\t\t\n\t\tsocket.emit(\"login\", userName, (res) => {\n\t\t\tconsole.log(\"Res\", res)\n\t\t\t// 지금 앱에서의 로그인은 받은 유저의 정보를 저장하고 소켓 아이디도 저장하는것\n\t\t\tif(res?.ok) {\n\t\t\t\tsetUser(res.data);\n\t\t\t}\n\t\t}); // 소켓을 사용하여 입력 받은 사용자의 이름을 보낸다., 콜백 함수를 사용하여 response 값을 받아 처리 가능\n\t};\n\n  return (\n    <div>\n      <div className=\"App\"></div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,UAAU,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEd,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExCD,SAAS,CAAC,MAAM;IACfS,WAAW,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEL,MAAMA,WAAW,GAACA,CAAA,KAAI;IACtB,MAAMC,QAAQ,GAAGC,MAAM,CAAC,eAAe,CAAC;IACxCC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEH,QAAQ,CAAC;IAG5BR,MAAM,CAACY,IAAI,CAAC,OAAO,EAAEJ,QAAQ,EAAGK,GAAG,IAAK;MACvCH,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEE,GAAG,CAAC;MACvB;MACA,IAAGA,GAAG,aAAHA,GAAG,eAAHA,GAAG,CAAEC,EAAE,EAAE;QACXR,OAAO,CAACO,GAAG,CAACE,IAAI,CAAC;MAClB;IACD,CAAC,CAAC,CAAC,CAAC;EACL,CAAC;;EAEA,oBACEb,OAAA;IAAAc,QAAA,eACEd,OAAA;MAAKe,SAAS,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV;AAACjB,EAAA,CA3BQD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}